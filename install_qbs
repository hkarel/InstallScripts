#!/bin/bash

set -u

#qt_path=/opt/qt/5.15/5.15.2
qt_path=/opt/qt/5.15-qbs

prefix=/opt/qbs
qmake=
config_qbs=
print_help=
branch_qbs=1.23
compiler=/usr/bin/g++
compiler_rpath=

# Определение параметров host-системы
if [ ! -e $(dirname $0)/os_detect ]; then
    echo "Error: os_detect script not found"
    exit 1
fi
. $(dirname $0)/os_detect

# Определение версии GCC компилятора
if [ ! -e $(dirname $0)/gcc_version ]; then
    echo "Error: gcc_version script not found"
    exit 1
fi
. $(dirname $0)/gcc_version
# ---

jobs=$(nproc)
[ "$jobs" -gt 16 ] && jobs=16

mem_size=$(free -m | sed '2!d' | sed 's/  */ /g' | cut -d' ' -f2)
[ "$mem_size" -lt 2100 ] && jobs=3
[ "$mem_size" -lt 510  ] && jobs=2

free_bsd_clang=no
if [ "$os_type" = "FreeBSD" ] && [ "$os_ver_major" = "10" ]; then
    free_bsd_clang=yes
fi

gcc_profile_ver=
gcc_profile_path=
#gcc840_profile_path=

# #
# # Определение версии GCC для конфигурирования профиля QBS
# #
# if [ "$free_bsd_clang" = "no" ]; then
#     which /usr/bin/g++ > /dev/null 2>&1
#     if [ "$?" -eq 0 ]; then
#         gcc_profile_path=/usr/bin/g++
#         gcc_profile_ver=$(gcc_version $gcc_profile_path)
#         if [ $(echo "$gcc_profile_ver" | sed 's/\.//g') -lt "840" ]; then
#             gcc_profile_path=/opt/gcc/8.4.0/bin/g++ > /dev/null 2>&1
#             gcc_profile_ver=$(gcc_version $gcc_profile_path)
#         fi
#     fi
# fi

function display_help()
{
cat << EOF
Usage: ${0##*/} [hcqb]
  -h --help       Display this help and exit
  -c -config-qbs  Only configuring QBS profiles
  -q --qt-path    Path to Qt framework
  -b --branch     Qbs branch for build
  -j --jobs       Thread count for QBS build
  Current build parameters:
    prefix ................ $prefix
    qt path ............... $qt_path
    qmake ................. $qmake
    qbs branch ............ $branch_qbs
    compiler .............. $compiler
    compiler rpath ........ $compiler_rpath
    gcc profile path ...... $gcc_profile_path (version: $gcc_profile_ver)
EOF
}
#gcc84 profile path .... $gcc840_profile_path (version: $(gcc_version $gcc840_profile_path))


# Обработка позиционных параметров:
#    http://wiki.bash-hackers.org/scripting/posparams
while test -n ${1:-""}
do
    case "$1" in
        -c|-config-qbs)
            config_qbs=yes
            shift
            ;;
        -h|--help)
            print_help=yes
            shift
            ;;
        -q|--qt-path)
            qt_path=$2
            shift 2
            ;;
        -b|--branch)
            branch_qbs=$2
            shift 2
            ;;
        -j|--jobs)
            jobs=$2
            shift 2
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            exit 1
            ;;
        *)  # No more options
            break
            ;;
    esac
done
echo "Thread count for build: $jobs"

if [ "$free_bsd_clang" = "yes" ]; then
    qt_path=/usr/local/lib/qt5/bin
    which $qt_path/qmake > /dev/null 2>&1
    [ "$?" -eq 0 ] && qmake=$qt_path/qmake
fi

# if [ "$os_name" = "Debian" ] && [ "$os_arch" = "armv7l" ]; then
#     qt_path=/usr/lib/arm-linux-gnueabihf/qt5/bin
#     which $qt_path/qmake > /dev/null 2>&1
#     [ "$?" -eq 0 ] && qmake=$qt_path/qmake
# fi

which $qt_path/gcc/bin/qmake > /dev/null 2>&1
[ "$?" -eq 0 ] && qmake=$qt_path/gcc/bin/qmake

which $qt_path/gcc_64/bin/qmake > /dev/null 2>&1
[ "$?" -eq 0 ] && qmake=$qt_path/gcc_64/bin/qmake

which $qt_path/bin/qmake > /dev/null 2>&1
[ "$?" -eq 0 ] && qmake=$qt_path/bin/qmake

compiler_ver=$(gcc_version $compiler)
if [ $(echo "$compiler_ver" | sed 's/\.//g') -lt "940" ]; then
    compiler_ver=9.4.0
    compiler=/opt/gcc/${compiler_ver}/bin/g++
    compiler_rpath=-Wl,-rpath,/opt/gcc/${compiler_ver}/lib64
fi

gcc_profile_path=$compiler
gcc_profile_ver=$compiler_ver

if [ "$print_help" = "yes" ]; then
    display_help
    exit 0
fi

SUDO=
if [ "$os_name"    = "Ubuntu" ] \
   || [ "$os_name" = "Debian" ] \
   || [ "$os_name" = "CentOS" ] \
   || [ "$os_id"   = "neon"   ]
then
    [ "$(id -u)" -ne 0 ] && SUDO=sudo
else
    if [ "$(id -u)" -ne 0 ]; then
        echo "Error: Script must be running with root privileges"
        exit 1
    fi
fi

MAKE=make
[ "$os_type" = "FreeBSD" ] && MAKE=gmake

# BEGIN --- Минимальное конфигурирование профиля ---
function config_qbs_profile()
{
    local QBS=$prefix/bin/qbs
    if [ ! -x $QBS ]; then
        echo "Error: QBS not found."
        exit 1
    fi
    echo "qbs binary location: $QBS"

    local profile=
    if [ "$free_bsd_clang" = "yes" ]; then
        profile=clang
        $QBS setup-toolchains --type clang /usr/bin/clang $profile
    else
        if [ -n "$gcc_profile_path" ]; then
            $QBS setup-toolchains --type gcc $gcc_profile_path gcc
        fi
#         if [ -n "$gcc840_profile_path" ]; then
#             $QBS setup-toolchains --type gcc $gcc840_profile_path gcc84
#         fi
    fi
    $QBS config defaultProfile gcc

    # Пример как можно задавать пути расположения библиотек в конфигурационном
    # файле QBS
    #if [ -n "$profile" ]; then
    #    if [ "$os_name" = "CentOS" ]; then
    #        if [ "$os_arch" = "amd64" ]; then
    #            $QBS config profiles.${profile}.sysconf.libraryPaths '["/usr/lib64/mysql"]'
    #        else
    #            $QBS config profiles.${profile}.sysconf.libraryPaths '["/usr/lib/mysql"]'
    #        fi
    #
    #    elif [ "$os_name" = "FreeBSD" ]; then
    #        $QBS config profiles.${profile}.sysconf.libraryPaths '["/usr/local/lib/mysql"]'
    #        $QBS config profiles.${profile}.sysconf.includePaths '["/usr/local/include"]'
    #    fi
    #fi

    echo 'Created qbs profiles:'
    $QBS config --list profiles.gcc profiles.gcc55
}

# Только конфигурирование профиля QBS
if [ "$config_qbs" = "yes" ]; then
    config_qbs_profile
    exit 0;
fi
# END --- Минимальное конфигурирование профиля ---

which git > /dev/null 2>&1
if [ "$?" -ne 0 ]; then
    echo "Error: Need install the GIT"
    exit 1
fi

if [ ! -e "$qmake" ]; then
    echo "Error: qmake not found"
    exit 1
fi

if [ ! -e "$compiler" ]; then
    echo "Error: compiler $compiler not found"
    exit 1
fi

src_dir=~/Tools/qbs

[ ! -d $src_dir ] && src_dir=~/tools/qbs
[ ! -d $src_dir ] && src_dir=$PWD/qbs
[ ! -d $src_dir ] && mkdir $src_dir

cd $src_dir

set -e

if [ ! -d .git ]; then
    rm -rf ./*
    #git clone https://gitorious.org/qt-labs/qbs.git ./
    #git clone git://code.qt.io/qt-labs/qbs.git ./
    git clone https://code.qt.io/qbs/qbs.git ./
fi

if [ ! -d .git ]; then
    echo "Error: Git repository not exists"
    exit 1;
fi

git checkout -f
git clean -dfx
git fetch --all

set +e
git checkout master
git pull -r
git branch -D $branch_qbs
set -e
git checkout --track origin/$branch_qbs
git submodule update --init --recursive

# Исключаем тесты из сборки
sed -i '/tests/d' qbs.pro

# Исключаем из сборки графический конфигуратор, нам нужна только консольная часть
sed -i '/config-ui/d' src/app/app.pro

# Понижаем требования к Qt до версии 5.9.5
#sed -i 's/(5, 11, 0)/(5, 9, 5)/' qbs.pro
#sed -i 's/Qt 5.11.0/Qt 5.9.5/' qbs.pro

if [ "$os_type" = "FreeBSD" ]; then
    $qmake -r \
        QMAKE_LFLAGS+=-Wl,-z,origin \
        QMAKE_LFLAGS+=-Wl,-rpath,${prefix}/lib \
        QMAKE_LIBDIR+=/usr/local/lib \
        QBS_INSTALL_PREFIX=${prefix}
else
    $qmake -r \
        QBS_INSTALL_PREFIX=${prefix} \
        QMAKE_CXX=$compiler \
        QMAKE_LINK=$compiler \
        QMAKE_LFLAGS+=$compiler_rpath
fi

$MAKE -j${jobs}
# $MAKE docs

cd /opt
if [ -d qbs/ ]; then
    $SUDO tar -cjf qbs_$(date +%Y.%m.%d_%H.%M.%S).tar.bz2 qbs/
    $SUDO rm -rf qbs/
fi
cd $src_dir

$SUDO $MAKE install

if [ "$os_name" = "FreeBSD" ]; then
    echo "Create symlinks ... "
    ln -sf $prefix/bin/qbs /usr/bin/qbs
else
    $SUDO su root -c "echo 'export PATH=\$PATH:${prefix}/bin' > /etc/profile.d/qbs.sh"
fi

config_qbs_profile

cd $src_dir
git checkout -f > /dev/null
git clean -dfx  > /dev/null
